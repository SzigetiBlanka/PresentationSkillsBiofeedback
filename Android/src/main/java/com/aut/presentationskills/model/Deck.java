/*
 * Biofeedback
 * This a documentation for the biofeedback Rest API 
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.aut.presentationskills.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Deck
 */
public class Deck {

  @SerializedName("_id")
  private String _id = null;

  @SerializedName("title")
  private String title = null;

  @SerializedName("imagePaths")
  private List<String> imagePaths = null;

  @SerializedName("description")
  private String description = null;
  /**
   * Gets or Sets type
   */
  @JsonAdapter(DeckTpye.Adapter.class)
  public enum DeckTpye {
    DECK("deck"),
    PROMPTER("prompter");

    private String value;

    DeckTpye(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static DeckTpye fromValue(String text) {
      for (DeckTpye b : DeckTpye.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<DeckTpye> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeckTpye enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeckTpye read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DeckTpye.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("type")
  private DeckTpye type = null;

  @SerializedName("measurementId")
  private String measurementId = null;
  public Deck _id(String _id) {
    this._id = _id;
    return this;
  }

  

  /**
  * Get _id
  * @return _id
  **/
  public String getId() {
    return _id;
  }
  public void setId(String _id) {
    this._id = _id;
  }
  public Deck title(String title) {
    this.title = title;
    return this;
  }

  

  /**
  * Get title
  * @return title
  **/
  public String getTitle() {
    return title;
  }
  public void setTitle(String title) {
    this.title = title;
  }
  public Deck imagePaths(List<String> imagePaths) {
    this.imagePaths = imagePaths;
    return this;
  }

  public Deck addImagePathsItem(String imagePathsItem) {
    if (this.imagePaths == null) {
      this.imagePaths = new ArrayList<String>();
    }
    this.imagePaths.add(imagePathsItem);
    return this;
  }

  /**
  * Get imagePaths
  * @return imagePaths
  **/
  public List<String> getImagePaths() {
    return imagePaths;
  }
  public void setImagePaths(List<String> imagePaths) {
    this.imagePaths = imagePaths;
  }
  public Deck description(String description) {
    this.description = description;
    return this;
  }

  

  /**
  * Get description
  * @return description
  **/
  public String getDescription() {
    return description;
  }
  public void setDescription(String description) {
    this.description = description;
  }
  public Deck type(DeckTpye type) {
    this.type = type;
    return this;
  }

  

  /**
  * Get type
  * @return type
  **/
  public DeckTpye getType() {
    return type;
  }
  public void setType(DeckTpye type) {
    this.type = type;
  }
  public Deck measurementId(String measurementId) {
    this.measurementId = measurementId;
    return this;
  }

  

  /**
  * Get measurementId
  * @return measurementId
  **/
  public String getMeasurementId() {
    return measurementId;
  }
  public void setMeasurementId(String measurementId) {
    this.measurementId = measurementId;
  }
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Deck deck = (Deck) o;
    return Objects.equals(this._id, deck._id) &&
        Objects.equals(this.title, deck.title) &&
        Objects.equals(this.imagePaths, deck.imagePaths) &&
        Objects.equals(this.description, deck.description) &&
        Objects.equals(this.type, deck.type) &&
        Objects.equals(this.measurementId, deck.measurementId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_id, title, imagePaths, description, type, measurementId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Deck {\n");

    sb.append("    _id: ").append(toIndentedString(_id)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    imagePaths: ").append(toIndentedString(imagePaths)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    measurementId: ").append(toIndentedString(measurementId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
